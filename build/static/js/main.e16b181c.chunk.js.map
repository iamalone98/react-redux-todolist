{"version":3,"sources":["redux/reducers/appReducer.js","redux/reducers/index.js","redux/store.js","hooks/useGetGoals.js","hooks/useAddForm.js","redux/actions/appActions.js","components/Sidebar/AddForm.js","components/Sidebar/Item.js","components/Sidebar/Sidebar.js","hooks/useTask.js","components/Tasks/AddTask.js","components/Tasks/Item.js","components/Tasks/Task.js","components/Tasks/Tasks.js","App.js","index.js"],"names":["initialState","goals","sidebarReducer","state","action","type","concat","payload","newItems","map","item","id","parentId","tasks","task","newItemsCompleted","i","length","completed","result","text","combineReducers","appReducer","store","createStore","rootReducer","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","useGetGoals","useSelector","maxId","forEach","element","Math","max","useAddForm","dispatch","useDispatch","useState","colors","currentColor","setCurrentColor","value","setValue","onChangeHandler","e","target","onSubmitHandler","preventDefault","trim","alert","color","AddForm","toggleForm","className","onSubmit","onChange","placeholder","key","onClick","src","alt","Item","to","Sidebar","showForm","setShowForm","exact","href","useTask","showRename","setShowRename","newtask","retask","onToggleRenameHandler","onToggleHandler","name","onRenameTaskHandler","onAddTaskHandler","AddTask","onAdd","connect","toggleCompleted","defaultChecked","htmlFor","Task","items","elem","path","children","match","params","App","useEffect","fetch","then","res","json","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e16b181c.chunk.js","sourcesContent":["const initialState = {\r\n  goals: []\r\n}\r\n\r\nconst sidebarReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'SET_LISTS':\r\n      return { ...state, goals: state.goals.concat(action.payload) };\r\n    case 'ADD_GOAL':\r\n      return { ...state, goals: state.goals.concat(action.payload) };\r\n    case 'ADD_TASK':\r\n      let newItems = state.goals.map((item) => {\r\n        if (item.id === action.payload.parentId) {\r\n          item.tasks = item.tasks.concat(action.payload.task)\r\n          return item;\r\n        } else {\r\n          return item;\r\n        }\r\n      })\r\n      return { ...state, goals: newItems };\r\n    case 'TOGGLE_COMPLETED':\r\n      let newItemsCompleted = state.goals.map((item) => {\r\n        if (item.id === action.payload.parentId) {\r\n          for (let i = 0; i < item.tasks.length; i++) {\r\n            if (item.tasks[i].id === action.payload.id) {\r\n              item.tasks[i].completed = !item.tasks[i].completed;\r\n            }\r\n          }\r\n          return item;\r\n        } else {\r\n          return item;\r\n        }\r\n      })\r\n      return { ...state, goals: newItemsCompleted };\r\n    case 'RENAME_TASK':\r\n      let result = state.goals.map((item) => {\r\n        if (item.id === action.payload.parentId) {\r\n          item.text = action.payload.text\r\n          return item;\r\n        }\r\n        return item;\r\n      })\r\n      return { ...state, goals: result };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default sidebarReducer","import { combineReducers } from 'redux';\r\nimport appReducer from './appReducer';\r\n\r\nexport default combineReducers({\r\n  appReducer,\r\n})","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst store = createStore(rootReducer, compose(\r\n  applyMiddleware(thunk),\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n));\r\n\r\n\r\nexport default store;","import { useSelector } from \"react-redux\";\r\n\r\nconst useGetGoals = () => {\r\n  const goals = useSelector((state) => state.appReducer.goals);\r\n  let maxId = 0;\r\n\r\n  goals.forEach(element => {\r\n    maxId = Math.max(maxId, element.id);\r\n  });\r\n\r\n  return {\r\n    goals,\r\n    maxId: ++maxId,\r\n  }\r\n}\r\n\r\nexport default useGetGoals\r\n","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addGoal } from '../redux/actions';\r\nimport useGetGoals from './useGetGoals';\r\n\r\nconst useAddForm = () => {\r\n  const dispatch = useDispatch();\r\n  const { maxId } = useGetGoals();\r\n  const [colors] = useState(['gray', 'green', 'blue', 'pink', 'lightgreen', 'purple', 'black', 'orange']);\r\n  const [currentColor, setCurrentColor] = useState('blue');\r\n  const [value, setValue] = useState('');\r\n\r\n  const onChangeHandler = (e) => {\r\n    setValue(e.target.value);\r\n  }\r\n\r\n  const onSubmitHandler = (e) => {\r\n    e.preventDefault();\r\n    if (!value.trim()) return alert('Поле не может быть пустым!');\r\n    dispatch(\r\n      addGoal({\r\n        id: maxId,\r\n        color: currentColor,\r\n        text: value,\r\n        tasks: [],\r\n      })\r\n    )\r\n  }\r\n  return {\r\n    value,\r\n    colors,\r\n    currentColor,\r\n    setCurrentColor,\r\n    onChangeHandler,\r\n    onSubmitHandler,\r\n  }\r\n}\r\n\r\nexport default useAddForm\r\n","export const setLists = (items) => ({\r\n  type: \"SET_LISTS\",\r\n  payload: items\r\n});\r\n\r\nexport const addGoal = (item) => ({\r\n  type: \"ADD_GOAL\",\r\n  payload: item\r\n});\r\n\r\nexport const addTask = (item) => ({\r\n  type: \"ADD_TASK\",\r\n  payload: item\r\n});\r\n\r\nexport const toggleCompleted = (id) => ({\r\n  type: \"TOGGLE_COMPLETED\",\r\n  payload: id\r\n});\r\n\r\nexport const renameTask = (item) => ({\r\n  type: \"RENAME_TASK\",\r\n  payload: item\r\n});\r\n\r\nexport const fetchLists = () => (dispatch) => {\r\n  fetch('/db.json')\r\n    .then(res => res.json())\r\n    .then(data => dispatch(setLists(data.goals)))\r\n}","import React from 'react'\r\nimport useAddForm from '../../hooks/useAddForm'\r\n\r\nconst AddForm = ({ toggleForm }) => {\r\n  const { value, colors, currentColor, setCurrentColor, onChangeHandler, onSubmitHandler } = useAddForm();\r\n  return (\r\n    <div className=\"todo__sidebar_item_addmenu\">\r\n      <form onSubmit={onSubmitHandler}>\r\n        <input value={value} onChange={onChangeHandler} type=\"text\" placeholder=\"Название папки\" />\r\n        <ul className=\"todo__sidebar_item_addmenu-list\">\r\n          {colors && colors.map((item) => (\r\n            <li key={item} className=\"todo__sidebar_item_addmenu-item\">\r\n              <i onClick={() => setCurrentColor(item)} className={`${item} ${currentColor === item ? 'active' : null}`}></i>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <button>Добавить</button>\r\n        <img\r\n          onClick={toggleForm}\r\n          className=\"todo__sidebar_item_addmenu_close\"\r\n          src=\"./closeicon.svg\"\r\n          alt=\"close\"\r\n        />\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddForm\r\n","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst Item = ({ id, text, color }) => {\r\n  return (\r\n    <li className=\"todo__sidebar_item\">\r\n      <NavLink to={`/${id}`}>\r\n        <i className={`todo__sidebar_item_icon ${color}`}></i>\r\n        <p>{text}</p>\r\n      </NavLink>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Item\r\n","import React, { useState } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport useGetGoals from '../../hooks/useGetGoals'\r\nimport AddForm from './AddForm'\r\nimport Item from './Item'\r\n\r\nconst Sidebar = () => {\r\n  const { goals } = useGetGoals();\r\n  const [showForm, setShowForm] = useState(false);\r\n  const toggleForm = (e) => {\r\n    e.preventDefault();\r\n    setShowForm(!showForm);\r\n  }\r\n  return (\r\n    <div className=\"todo__sidebar\">\r\n      <ul className=\"todo__sidebar_list\">\r\n        <li className=\"todo__sidebar_item alltasks\">\r\n          <NavLink exact to='/'>\r\n            <img src=\"./alltasks.svg\" alt=\"icon\" />\r\n            <p>Все задачи</p>\r\n          </NavLink>\r\n        </li>\r\n        {goals && goals.map((item) => (\r\n          <Item key={item.id} {...item} />\r\n        )\r\n        )}\r\n        <li className=\"todo__sidebar_item addtask\">\r\n          <a href='/' onClick={toggleForm}>\r\n            <img src=\"./addtask.svg\" alt=\"icon\" />\r\n            <p>Добавить папку</p>\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      {showForm && <AddForm toggleForm={toggleForm} />}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Sidebar\r\n","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { renameTask } from '../redux/actions';\r\nimport { addTask } from '../redux/actions';\r\nimport useGetGoals from './useGetGoals';\r\n\r\nconst useTask = ({ parentId, text = '' }) => {\r\n  const dispatch = useDispatch();\r\n  const { maxId } = useGetGoals();\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [showRename, setShowRename] = useState(false);\r\n  const [value, setValue] = useState({\r\n    newtask: '',\r\n    retask: text,\r\n  });\r\n\r\n  const onToggleHandler = () => {\r\n    setShowForm(!showForm);\r\n  }\r\n\r\n  const onToggleRenameHandler = () => {\r\n    setShowRename(!showRename);\r\n  }\r\n\r\n  const onChangeHandler = (e) => {\r\n    setValue({\r\n      ...value,\r\n      [e.target.name]: e.target.value\r\n    });\r\n  }\r\n\r\n  const onAddTaskHandler = () => {\r\n    if (!value.newtask.trim()) return alert('Поле не может быть пустым!');\r\n    dispatch(\r\n      addTask({\r\n        parentId,\r\n        task: {\r\n          id: maxId,\r\n          text: value.newtask,\r\n          completed: false,\r\n        }\r\n      })\r\n    )\r\n    setValue({ newtask: '' });\r\n  }\r\n\r\n  const onRenameTaskHandler = () => {\r\n    if (!value.retask.trim()) return alert('Поле не может быть пустым!');\r\n    dispatch(\r\n      renameTask({\r\n        parentId,\r\n        text: value.retask\r\n      })\r\n    )\r\n    onToggleRenameHandler()\r\n  }\r\n\r\n  return {\r\n    showForm,\r\n    onToggleHandler,\r\n    onToggleRenameHandler,\r\n    onChangeHandler,\r\n    showRename,\r\n    setShowRename,\r\n    value,\r\n    onRenameTaskHandler,\r\n    onAddTaskHandler,\r\n  }\r\n}\r\n\r\nexport default useTask\r\n","import React from 'react'\r\n\r\nconst AddTask = ({ name, text, value, onChange, onAdd, onToggleHandler }) => {\r\n  return (\r\n    <div className=\"todo__tasks_addtask-form\">\r\n      <input name={name} value={value} onChange={onChange} type=\"text\" placeholder=\"Текст задачи\" />\r\n      <button onClick={onAdd} className=\"todo__tasks_addtask-form-add\">\r\n        {text}\r\n      </button>\r\n      <button onClick={onToggleHandler} className=\"todo__tasks_addtask-form-close\">\r\n        Отмена\r\n    </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddTask\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { toggleCompleted } from '../../redux/actions'\r\n\r\nconst Item = ({ text, id, parentId, completed, toggleCompleted }) => {\r\n  const onToggleHandler = () => {\r\n    toggleCompleted({ parentId, id })\r\n  }\r\n  return (\r\n    <div className=\"todo__tasks_item\">\r\n      <input\r\n        id={`todo__tasks_item-input-${parentId}-${id}`}\r\n        onClick={onToggleHandler}\r\n        className=\"todo__tasks_item-input\"\r\n        type=\"checkbox\"\r\n        defaultChecked={completed}\r\n      />\r\n      <label\r\n        className=\"todo__tasks_item-label checked\"\r\n        htmlFor={`todo__tasks_item-input-${parentId}-${id}`}\r\n      ></label>\r\n      <p>{text}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapDis = (dispatch) => ({\r\n  toggleCompleted: (item) => dispatch(toggleCompleted(item))\r\n})\r\n\r\nexport default connect(null, mapDis)(Item)\r\n","import React from 'react'\r\nimport useTask from '../../hooks/useTask';\r\nimport AddTask from './AddTask';\r\nimport Item from './Item'\r\n\r\nconst Task = ({ id, items, text, color }) => {\r\n  const {\r\n    value: { newtask, retask },\r\n    showForm,\r\n    showRename,\r\n    onRenameTaskHandler,\r\n    onAddTaskHandler,\r\n    onToggleHandler,\r\n    onToggleRenameHandler,\r\n    onChangeHandler } = useTask({ parentId: id, text });\r\n\r\n  return (\r\n    <div className=\"todo__task\">\r\n      {!showRename && (\r\n        <h1 onClick={onToggleRenameHandler} className={`${color}`}>\r\n          {text} <img src=\"./edit.svg\" alt=\"edit\" />\r\n        </h1>\r\n      )}\r\n      {showRename && (\r\n        <AddTask onAdd={onRenameTaskHandler} onChange={onChangeHandler} value={retask} name=\"retask\" onToggleHandler={onToggleRenameHandler} text={'Сменить название'} />\r\n      )}\r\n      <hr />\r\n      <div className=\"todo__tasks_list\">\r\n        {items && items.map((elem) => {\r\n          return <Item key={elem.id} parentId={id} id={elem.id} {...elem} />\r\n        })}\r\n      </div>\r\n      <div className=\"todo__tasks_addtask\">\r\n        {!showForm && (\r\n          <div onClick={onToggleHandler} className=\"todo__tasks_addtask-btn\">\r\n            <img src=\"./addtask.svg\" alt=\"addtask\" />\r\n            <p>Новая задача</p>\r\n          </div>\r\n        )}\r\n        {showForm && (\r\n          <AddTask text={'Добавить задачу'} name=\"newtask\" onAdd={onAddTaskHandler} onToggleHandler={onToggleHandler} value={newtask} onChange={onChangeHandler} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Task;\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport Task from './Task'\r\n\r\nconst Tasks = ({ tasks }) => {\r\n  return (\r\n    <div className=\"todo__tasks\">\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          {tasks && tasks.map((item) => (\r\n            <Task key={item.id} id={item.id} items={item.tasks} color={item.color} text={item.text} />\r\n          ))}\r\n        </Route>\r\n        <Route exact path=\"/:id\" children={({ match }) => {\r\n          return (\r\n            tasks && tasks.map((item) => {\r\n              if (+match.params.id === +item.id) {\r\n                return (\r\n                  <Task key={item.id} id={item.id} items={item.tasks} color={item.color} text={item.text} />\r\n                )\r\n              }\r\n\r\n              return null\r\n            })\r\n          )\r\n        }}>\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapState = (state) => ({\r\n  tasks: state.appReducer.goals\r\n})\r\n\r\nexport default connect(mapState)(Tasks)\r\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from 'react-redux';\nimport Sidebar from \"./components/Sidebar/Sidebar\";\nimport Tasks from \"./components/Tasks/Tasks\";\nimport { fetchLists } from \"./redux/actions\";\nfunction App() {\n  const dispatch = useDispatch();\n  useEffect(() => dispatch(fetchLists()), [dispatch]);\n  return (\n    <div className=\"wrapper\">\n      <div className=\"todo\">\n        <Sidebar />\n        <Tasks />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from './redux/store';\nimport \"./index.sass\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}